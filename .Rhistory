))%>%  mutate(LEVEL_scale = case_when(LEVEL_scale<5~0,
LEVEL_scale<10~1,
LEVEL_scale<20~2,
LEVEL_scale<40~3,
LEVEL_scale<80~4,
LEVEL_scale<160~5,
LEVEL_scale<320~6,
LEVEL_scale<640~7,
LEVEL_scale<1280~8,
LEVEL_scale<2560~9,
TRUE~ as.numeric(10)
))
# local leaderboard
temp=cohen.kappa(
factor(round(tt$level_scale_pred))%>%
cbind(
factor(round(tt$LEVEL_scale))))
temp$weighted.kappa
}
#### train and test part 1 ####
# xgboost find best cv
{
param <- list("objective" = "reg:linear",
"eval_metric" = "mae",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 70)
set.seed(70)
xgb_model = xgboost(param = param,  data = train_matrix, nrounds =66 , print_every_n = 100)
train_pred = predict(xgb_model,test_matrix)
tt = train_pred%>%
cbind(test_label)%>%
rename(level_scale_pred = '.')%>%
mutate(level_scale_pred = case_when(level_scale_pred<5~0,
level_scale_pred<10~1,
level_scale_pred<20~2,
level_scale_pred<40~3,
level_scale_pred<80~4,
level_scale_pred<160~5,
level_scale_pred<320~6,
level_scale_pred<640~7,
level_scale_pred<1280~8,
level_scale_pred<2560~9,
TRUE~ as.numeric(10)
))%>%  mutate(LEVEL_scale = case_when(LEVEL_scale<5~0,
LEVEL_scale<10~1,
LEVEL_scale<20~2,
LEVEL_scale<40~3,
LEVEL_scale<80~4,
LEVEL_scale<160~5,
LEVEL_scale<320~6,
LEVEL_scale<640~7,
LEVEL_scale<1280~8,
LEVEL_scale<2560~9,
TRUE~ as.numeric(10)
))
# local leaderboard
temp=cohen.kappa(
factor(round(tt$level_scale_pred))%>%
cbind(
factor(round(tt$LEVEL_scale))))
temp$weighted.kappa
}
#### train and test part 1 ####
# xgboost find best cv
{
param <- list("objective" = "reg:linear",
"eval_metric" = "mae",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 70)
set.seed(70)
xgb_model = xgboost(param = param,  data = train_matrix, nrounds =66 , print_every_n = 100)
train_pred = predict(xgb_model,test_matrix)
tt = train_pred%>%
cbind(test_label)%>%
rename(level_scale_pred = '.')%>%
mutate(level_scale_pred = case_when(level_scale_pred<5~0,
level_scale_pred<10~1,
level_scale_pred<20~2,
level_scale_pred<40~3,
level_scale_pred<80~4,
level_scale_pred<160~5,
level_scale_pred<320~6,
level_scale_pred<640~7,
level_scale_pred<1280~8,
level_scale_pred<2560~9,
TRUE~ as.numeric(10)
))%>%  mutate(LEVEL_scale = case_when(LEVEL_scale<5~0,
LEVEL_scale<10~1,
LEVEL_scale<20~2,
LEVEL_scale<40~3,
LEVEL_scale<80~4,
LEVEL_scale<160~5,
LEVEL_scale<320~6,
LEVEL_scale<640~7,
LEVEL_scale<1280~8,
LEVEL_scale<2560~9,
TRUE~ as.numeric(10)
))
# local leaderboard
temp=cohen.kappa(
factor(round(tt$level_scale_pred))%>%
cbind(
factor(round(tt$LEVEL_scale))))
temp$weighted.kappa
}
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 200, print_every_n = 10)
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 60, print_every_n = 10)
test$LEVEL= round(predict(xgb_model,upload_data))
#### full / upload ####
test = read.csv('./test.csv')
#### full / upload ####
test = read_csv('./test.csv')
test$LEVEL= round(predict(xgb_model,upload_data))
test$LEVEL
mutate(ID = paste0(Station,'_',Season))%>%
select(ID,LEVEL)%>%
fwrite('./submission_xgboost_reg_v2_mapping_scale.csv',row.names = FALSE)
#### full / upload ####
test = read_csv('./test.csv')
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 60, print_every_n = 10)
test$LEVEL= round(predict(xgb_model,upload_data))
# write
test%>%
mutate(LEVEL = case_when(LEVEL<5~0,
LEVEL<10~1,
LEVEL<20~2,
LEVEL<40~3,
LEVEL<80~4,
LEVEL<160~5,
LEVEL<320~6,
LEVEL<640~7,
LEVEL<1280~8,
LEVEL<2560~9,
TRUE~ as.numeric(10)
))%>%
mutate(ID = paste0(Station,'_',Season))%>%
select(ID,LEVEL)%>%
fwrite('./submission_xgboost_reg_v2_mapping_scale.csv',row.names = FALSE)
fwrite(importance_matrix,'./importance_xgb_regv1.csv')
# compute feature importance matrix
importance_matrix = xgb.importance(feature_names = names(train_data), model = xgb_model)
fwrite(importance_matrix,'./importance_xgb_regv1.csv')
fwrite(importance_matrix,'./importance_xgb_regv2.csv')
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 200, print_every_n = 10)
test$LEVEL= round(predict(xgb_model,upload_data))
# compute feature importance matrix
importance_matrix = xgb.importance(feature_names = names(train_data), model = xgb_model)
fwrite(importance_matrix,'./importance_xgb_regv3n100.csv')
fwrite(importance_matrix,'./importance_xgb_regv3n200.csv')
test$LEVEL= round(predict(xgb_model,upload_data))
# write
test%>%
mutate(LEVEL = case_when(LEVEL<5~0,
LEVEL<10~1,
LEVEL<20~2,
LEVEL<40~3,
LEVEL<80~4,
LEVEL<160~5,
LEVEL<320~6,
LEVEL<640~7,
LEVEL<1280~8,
LEVEL<2560~9,
TRUE~ as.numeric(10)
))%>%
mutate(ID = paste0(Station,'_',Season))%>%
select(ID,LEVEL)%>%
fwrite('./submission_xgboost_reg_v2_mapping_scale.csv',row.names = FALSE)
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 60, print_every_n = 10)
test$LEVEL= round(predict(xgb_model,upload_data))
# write
test%>%
mutate(LEVEL = case_when(LEVEL<5~0,
LEVEL<10~1,
LEVEL<20~2,
LEVEL<40~3,
LEVEL<80~4,
LEVEL<160~5,
LEVEL<320~6,
LEVEL<640~7,
LEVEL<1280~8,
LEVEL<2560~9,
TRUE~ as.numeric(10)
))%>%
mutate(ID = paste0(Station,'_',Season))%>%
select(ID,LEVEL)%>%
fwrite('./submission_xgboost_reg_v2_mapping_scale.csv',row.names = FALSE)
xgb_model = xgboost(param = param,  data = full_matrix, nrounds = 100, print_every_n = 10)
test$LEVEL= round(predict(xgb_model,upload_data))
# write
test%>%
mutate(LEVEL = case_when(LEVEL<5~0,
LEVEL<10~1,
LEVEL<20~2,
LEVEL<40~3,
LEVEL<80~4,
LEVEL<160~5,
LEVEL<320~6,
LEVEL<640~7,
LEVEL<1280~8,
LEVEL<2560~9,
TRUE~ as.numeric(10)
))%>%
mutate(ID = paste0(Station,'_',Season))%>%
select(ID,LEVEL)%>%
fwrite('./submission_xgboost_reg_v2_mapping_scale_n100.csv',row.names = FALSE)
train = read_csv('./train revise.csv')
train%>%View()
test
test%>%names()
test = read_csv('./test revise.csv')
library(gstat)
library(sp)
#### featuring ####
# xgboost of multiple classification need to start from zero
all = train%>%
bind_rows(test)%>%
# separate the station part for EN and NUMERIC part for KNN
mutate(station_num = gsub("[^0-9.-]","",Station),
station_num = as.numeric(station_num))%>%
mutate(station_EN = gsub("[^A-Z]","",Station),
station_EN = as.numeric(as.factor(station_EN)))%>%
mutate(Station = as.numeric(as.factor(Station)))%>%
mutate(County = as.numeric(as.factor(County)))%>%
mutate(Location = as.numeric(as.factor(Location)))%>%
# make the Seat simple version
mutate(Seat_simple = case_when(Seat%in%c(1,2,8)~ 'north',
Seat%in%c(2,3,4)~ 'west',
Seat%in%c(4,5,6)~ 'south',
Seat%in%c(6,7,8)~ 'east'))%>%
mutate(Seat_simple = as.numeric(as.factor(Seat_simple)))
# season 1~4
s1 = all%>%filter(Season == 1) %>%select(Lat,Lon,LEVEL)
coordinates(s1) = ~lon+lat
coordinates(s1) = ~Lon+Lat
plot(train_sample)
plot(s1)
coordinates(s1) = ~Lon+Lat
# season 1~4
s1 = all%>%filter(Season == 1) %>%select(Lat,Lon,LEVEL)
coordinates(s1) = ~Lon+Lat
plot(s1)
# season 1~4
s1 = all%>%
filter(Season == 1) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 1)%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(total_grid)
plot(s1)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph")) # fit model
plot(lzn.vgm, lzn.fit)
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged%>%names()
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
total_grid = all%>%
filter(Season == 1)%>%
select(Lat,Lon)%>%
filter(is.na(LEVEL))
total_grid = all%>%
filter(Season == 1)%>%
select(Lat,Lon)%>%
filter(is.na(LEVEL))
# season 1~4
s1 = all%>%
filter(Season == 1) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 1)%>%
select(Lat,Lon)%>%
filter(is.na(LEVEL))
select(Lat,Lon)
total_grid = all%>%
filter(Season == 1)%>%
filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
# season 1~4
s1 = all%>%
filter(Season == 2) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 2)%>%
filter(is.na(LEVEL))%>%
select(Lat,Lon)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
# season 1~4
s1 = all%>%
filter(Season == 2) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 2)%>%
filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
s1 = all%>%
filter(Season == 3) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 3)%>%
filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
s1 = all%>%
filter(Season == 4) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 4)%>%
filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
# season 1~4
s1 = all%>%
filter(Season == 4) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 4)%>%
#  filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame
test%>%nrow()
# season 1~4
s1 = all%>%
filter(Season == 4) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)%>%View()
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
# season 1~4
s1 = all%>%
filter(Season == 4) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == 4)%>%
#  filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)%>%
select(var_1.pred)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
lzn.kriged %>% as.data.frame%>%cbind(all%>%
filter(Season == 4)%>%
select(var1.pred)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
lzn.kriged %>% as.data.frame
lzn.kriged %>% as.data.frame%>%select(var1.pred)%>%cbind(all%>%
filter(Season == 4)
#  filter(is.na(LEVEL))%>%
)%>%select(var1.pred,LEVEL)%>%View()
# season 1~4
ven = function(i){
s1 = all%>%
filter(Season == i) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == i)%>%
#  filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
plot(s1)
plot(total_grid)
bbox(s1)
bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame%>%select(var1.pred)%>%cbind(all%>%
filter(Season == i))%>%select(var1.pred,LEVEL)%>%View()
}
ven(2)
# season 1~4
ven = function(i){
s1 = all%>%
filter(Season == i) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == i)%>%
#  filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
#plot(s1)
#plot(total_grid)
#bbox(s1)
#bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame%>%select(var1.pred)%>%cbind(all%>%
filter(Season == i))%>%select(var1.pred,LEVEL)%>%View()
}
ven(2)
ven(3)
# season 1~4
ven = function(i){
s1 = all%>%
filter(Season == i) %>%
select(Lat,Lon,LEVEL)%>%
filter(!is.na(LEVEL))
total_grid = all%>%
filter(Season == i)%>%
#  filter(is.na(LEVEL))%>%
select(Lat,Lon)
coordinates(s1) = ~Lon+Lat
coordinates(total_grid) = ~Lon+Lat
#plot(s1)
#plot(total_grid)
#bbox(s1)
#bbox(total_grid)
lzn.vgm <- variogram(LEVEL~1, s1) # calculates sample variogram values
lzn.fit <- fit.variogram(lzn.vgm, model=vgm("Sph"),fit.kappa = T) # fit model
lzn.kriged <- krige(LEVEL ~ 1, s1,total_grid , model=lzn.fit)
lzn.kriged %>% as.data.frame%>%select(var1.pred)%>%cbind(all%>%
filter(Season == i))%>%select(var1.pred,LEVEL)%>%View()
}
ven(4)
train = read_csv('./train revise.csv')
test = read_csv('./test revise.csv')
train%>%View()
